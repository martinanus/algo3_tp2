@startuml


AlgoThief o-- Ciudad
AlgoThief o-- Objeto
AlgoThief o-- Computadora

Computadora o-- Ladron

Objeto <|-- ObjetoComun
Objeto <|-- ObjetoValioso
Objeto <|-- ObjetoMuyValioso

Caso o-- AlgoThief
Caso o-- Objeto
Caso o-- Ladron
Caso <|-- CasoAsignado
Caso <|-- CasoNoAsignado
Policia o-"1" Caso
AlgoThief ->"1" Policia

class Policia {
    + visitar(e : Edificio, r : Reloj): Interactuable
    + viajar(c : Ciudad, r : Reloj): void
}

abstract class Caso {
 + {abstract} cargarEdificios() : void
 + {abstract} cargarPistasLadron() : void
 + {abstract} finalizar() : void
 + {abstract} finalizarSinExito() : void
}

 class CasoAsignado {
 + cargarEdificios() : void
 + cargarPistasLadron() : void
 + finalizar() : void
 + finalizarSinExito() : void
}

class CasoNoAsignado {
 + cargarEdificios() : void
 + cargarPistasLadron() : void
 + finalizar() : void
 + finalizarSinExito() : void
}
abstract class Objeto {
    - nombre : String;
    - nombreCiudad : String;

    + {abstract} generarRecorrido(ArrayList<Ciudad>,int , String ):ArrayList<Ciudad>
}

class AlgoThief {
    - descripcionSospechoso : Descripcion
    - reloj : Reloj
    + generarPartida() : void
    + visitar(policia : Policia , nombreEdificio: String) : Interactuable
    + viajar(nombreCiudad : String ,policia : Policia ) : void
    + generarOrdenDeArresto(policia : Policia) : void
    + finalizar(objetoRobado: Objeto , ladron: Ladron ) : void
}

class Ciudad {
    - edificios : ArrayList<Edificio>
    - posicion : Posicion
    - nombre : String
    - descripcionCiudad : DescripcionCiudad

    + agregarCiudadDestino(ciudad : Ciudad) : void
    + visitar(edificio : Edificio, r : Reloj): Interactuable
}

class ObjetoComun {
    +generarRecorrido(ArrayList<Ciudad>,int , String ):ArrayList<Ciudad>
}

class ObjetoValioso {
    + generarRecorrido(ArrayList<Ciudad>,int , String ):ArrayList<Ciudad>
}

class ObjetoMuyValioso {
    + generarRecorrido(ArrayList<Ciudad>,int , String ):ArrayList<Ciudad>
}



class Computadora {
    + agregarSopechoso(ladron : Ladron) : void
    + emitirOrdenDeArresto(sospechoso : Ladron) : EstadoOrdenArresto
    + cargarDatos() : ArrayList<Ladron>
}

class Ladron {
    - descripcion : Descripcion
    + generarPista() : Pista
    + compararCon(ladron : Ladron) : boolean
}




@enduml