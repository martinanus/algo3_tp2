@startuml

interface Rango {
    {abstract} +viajar(ciudadOrigen : Ciudad, ciudadDestino : Ciudad, reloj : Reloj) : void
    {abstract} +sumarArrestos(arrestoASumar : int) : Rango
    {abstract} +generarCaso(objetosRobados : ArrayList<Objeto>, ciudades : ArrayList<Objeto>, ladron : Ladron , algoThief : AlgoThief) : CasoAsignado
}

class Novato {
    -velocidad : double
    -contadorArrestos : int
    -rango : String
    +viajar(ciudadOrigen : Ciudad, ciudadDestino : Ciudad, reloj : Reloj) : void
    +sumarArrestos(arrestoASumar : int) : Rango
    +generarCaso(objetosRobados : ArrayList<Objeto>, ciudades : ArrayList<Objeto>, ladron : Ladron , algoThief : AlgoThief) : CasoAsignado
}

class Detective {
    -velocidad : double
    -contadorArrestos : int
    +viajar(ciudadOrigen : Ciudad, ciudadDestino : Ciudad, reloj : Reloj) : void
    +sumarArrestos(arrestoASumar : int) : Rango
    +generarCaso(objetosRobados : ArrayList<Objeto>, ciudades : ArrayList<Objeto>, ladron : Ladron , algoThief : AlgoThief) : CasoAsignado
}

class Investigador {
    -velocidad : double
    -contadorArrestos : int
    +viajar(ciudadOrigen : Ciudad, ciudadDestino : Ciudad, reloj : Reloj) : void
    +sumarArrestos(arrestoASumar : int) : Rango
    +generarCaso(objetosRobados : ArrayList<Objeto>, ciudades : ArrayList<Objeto>, ladron : Ladron , algoThief : AlgoThief) : CasoAsignado
}

class Sargento{
    -velocidad : double
    +viajar(ciudadOrigen : Ciudad, ciudadDestino : Ciudad, reloj : Reloj) : void
    +sumarArrestos(arrestoASumar : int) : Rango
    +generarCaso(objetosRobados : ArrayList<Objeto>, ciudades : ArrayList<Objeto>, ladron : Ladron , algoThief : AlgoThief) : CasoAsignado
}

Novato ..up|> Rango
Detective ..up|> Rango
Investigador ..down|> Rango
Sargento ..down|> Rango

@enduml